[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "vibe-check"
version = "0.1.0"
description = "AI Coding Agent Benchmark Framework"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Brian Douglas", email = "hello@bdougie.live"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=2.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0",
    "ruff>=0.1.8",
    "pre-commit>=3.6.0",
    "black>=23.0.0"
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0"
]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=benchmark",
    "--cov=.",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing",
    "--cov-fail-under=50",
    "--strict-markers",
    "--strict-config",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["benchmark", "."]
omit = [
    "tests/*",
    "test_*.py",
    "*_test.py",
    "setup.py",
    "*/site-packages/*",
    "*/__pycache__/*",
    "htmlcov/*",
    ".tox/*",
    ".venv/*",
    "venv/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 50

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
# Ruff configuration - extremely fast Python linter
target-version = "py38"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented-out code)
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by black)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside the exception class
    "SIM108",  # Use ternary operator instead of if-else-block
]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "ARG001",  # Unused function argument (common in tests)
    "PLR0913", # Too many arguments (fixtures)
    "TRY301",  # Abstract `raise` to an inner function
]
"test_*.py" = [
    "ARG001",  # Unused function argument 
    "PLR0913", # Too many arguments
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["benchmark", "benchmark_task"]
force-single-line = false
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"